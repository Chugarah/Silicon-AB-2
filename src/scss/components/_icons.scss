@charset "UTF-8";
@use "@scss/vendors" as v;
@use "@scss/abstracts/_variables" as a;
@use "@scss/abstracts/_mixins" as a-m;

///
/// Creates a customizable icon with support for Font Awesome integration, dynamic padding calculation using calc(),
/// and flexible sizing options for both rectangular and circular buttons.
///
/// @param {Length} $icon-width - Total width of the icon container
/// @param {Length} $icon-height - Total height of the icon container
/// @param {Length} $fa-icon-width - Width of the Font Awesome icon
/// @param {Length} $fa-icon-height - Height of the Font Awesome icon
/// @param {Color} $icon-bg-color [null] - Background color of the icon
/// @param {Boolean} $font-awesome - Whether to use Font Awesome icons
/// @param {String} $fa-icon - Font Awesome icon variable
/// @param {String} $font-awesome-style - Font Awesome icon style ('solid' or 'brand')
/// @param {Length} $icon-border-radius [null] - Border radius of the icon
/// @param {Color} $icon-color [null] - Color of the icon
/// @param {Length} $icon-padding [null] - Custom padding around the icon (overrides dynamic calculation if provided)
///
/// @example code-scss
///   .my-rectangular-icon {
///     @include icon(
///       $icon-width: 100px,
///       $icon-height: 60px,
///       $fa-icon-width: 20px,
///       $fa-icon-height: 20px,
///       $icon-bg-color: #f0f0f0,
///       $font-awesome: true,
///       $fa-icon: $fa-var-user,
///       $font-awesome-style: solid,
///       $icon-border-radius: 5px,
///       $icon-color: #333
///     );
///   }
///
///   .my-circular-icon {
///     @include icon(
///       $icon-width: 60px,
///       $icon-height: 60px,
///       $fa-icon-width: 20px,
///       $fa-icon-height: 20px,
///       $icon-bg-color: #f0f0f0,
///       $font-awesome: true,
///       $fa-icon: $fa-var-user,
///       $font-awesome-style: solid,
///       $icon-border-radius: 50%,
///       $icon-color: #333
///     );
///   }
///
/// @requires {mixin} v.vendor-fa-icon - Vendor Font Awesome icon mixin
///
/// @throws Will not apply background styles if $icon-bg-color is not a valid color
///
/// @access public
///
/// @note This mixin uses dynamic padding calculation with calc() to center the icon within the container.
///       The calculation is based on the provided icon container size and Font Awesome icon size.
///       Custom padding can be provided to override the dynamic calculation if needed.
///       The use of calc() allows for more flexible and dynamic sizing, especially when using different units.
/// Used AI Phind to Generate Documentation
@mixin icon(
  $icon-width,
  $icon-height,
  $fa-icon-width,
  $fa-icon-height,
  $icon-bg-color: null,
  $font-awesome,
  $fa-icon,
  $font-awesome-style,
  $icon-border-radius: null,
  $icon-color: null,
  $icon-padding: null
) {
  /// Making the calculation
  $padding-horizontal: calc((#{$icon-width} - #{$fa-icon-width}) / 2);
  $padding-vertical: calc((#{$icon-height} - #{$fa-icon-height}) / 2);

  display: inline-flex;
  justify-content: center;
  align-items: center;

  @if $icon-padding !=null {
    padding: #{$icon-padding};
  } @else {
    padding: #{$padding-vertical} #{$padding-horizontal};
  }

  @if $icon-bg-color !=null {
    background-color: #{$icon-bg-color};
  }

  @if $icon-color !=null {
    color: #{$icon-color};
  }

  @if $icon-border-radius !=null {
    border-radius: #{$icon-border-radius};
  }

  &::before {
    display: flex;
    justify-content: center;
    align-items: center;
    width: #{$fa-icon-width};
    height: #{$fa-icon-height};
    font-size: min(#{$fa-icon-width}, #{$fa-icon-height});
  }

  @if $font-awesome ==true {
    $fa-icon-value: if(
      type-of($fa-icon) ==string and str-index($fa-icon, "var(") !=null,
      unquote(#{$fa-icon}),
      $fa-icon
    );

    @if $icon-width !=null and $icon-height !=null {
      @include v.vendor-fa-icon(
        $font-var: $fa-icon-value,
        $font-awesome-style: #{$font-awesome-style},
        $fa-icon-width: #{$fa-icon-width},
        $fa-icon-height: #{$fa-icon-height}
      );
    } @else {
      @include v.vendor-fa-icon($fa-icon-value, #{$font-awesome-style});
    }
  }
}

///
/// Creates a base icon using the `icon` mixin with CSS custom properties for flexible styling.
/// This mixin allows for easy customization of icons across different components or themes.
///
/// @param {String} $font-icon-var - Font Awesome icon variable
/// @param {String} $fa-icon-style - Font Awesome icon style ('solid' or 'brand')
/// @param {Boolean} $font-awesome-flag - Whether to use Font Awesome icons
///
/// @example code-scss
///   .my-custom-icon {
///     --icon-width: 60px;
///     --icon-height: 60px;
///     --fa-icon-width: 20px;
///     --fa-icon-height: 20px;
///     --fa-icon-bg-color: #f0f0f0;
///     --icon-border-radius: 50%;
///     --fa-icon-color: #333;
///
///     @include icon-base($fa-var-user, solid, true);
///   }
///
/// @requires {mixin} icon - The main icon mixin
///
/// @access public
///
/// @note This mixin uses CSS custom properties (variables) for most of its values,
///       allowing for easy runtime customization. The `$font-awesome` parameter
///       is passed directly due to limitations with using variables for this parameter.
///       To use a variable for `$font-awesome`, you would need to use JavaScript to
///       set a CSS custom property.
/// Used AI Phind to Generate Documentation
@mixin icon-base(
  $font-icon-var,
  $fa-icon-style,
  $font-awesome-flag,
  $animation: null
) {
  @include icon(
    $icon-width: #{var(--icon-width)},
    $icon-height: #{var(--icon-height)},
    $fa-icon-width: var(--fa-icon-width),
    $fa-icon-height: var(--fa-icon-height),
    $icon-bg-color: var(--fa-icon-bg-color),
    /// I give up, I could not solve to user variable here
    /// If I want to use variable I need to use Javascript
    $font-awesome: $font-awesome-flag,
    $fa-icon: $font-icon-var,
    $font-awesome-style: $fa-icon-style,
    $icon-border-radius: #{var(--icon-border-radius)},
    $icon-color: #{var(--fa-icon-color)}
  );

  @if $animation !=null {
    /// Adding Hover States
    @include a-m.interactive-states("&");
  }
}